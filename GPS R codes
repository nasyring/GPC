# Title: GPS Algorithm
# Reference: https://arxiv.org/abs/1509.00922
# Author: Nicholas Syring
# Contact: nasyrin@gmail.com
# 
# Instructions:
# 1. Have the quantreg package installed
# 2. Run all code below up to "# Example"
# 3. Running the code under "Example" will replicate the GPS results in Table 1 of the reference above.
#    Make the corresponding changes to the number of data points "n", the number of simulation runs "reps",
#    the number of bootstrap resamples "B", and the number of posterior samples "M".


library(quantreg)

rmodel <- function(n, theta) {

  X <- rchisq(n, 2) - 2
  Y <- theta[1] + theta[2] * X + rnorm(n, 0, 2)
  return(cbind(X, Y))

}

mh = function(x0, lf, ldprop, rprop, N, B) {
  x <- matrix(NA, N + B, length(x0))
  lfx <- rep(NA, N + B)
  x[1,] <- x0
  lfx[1] <- lf(x0)
  ct <- 0
  for(i in 2:(N + B)) {

    u <- rprop(x[i-1,])
    lfu <- lf(u)
    r <- lfu + ldprop(x[i-1,], u) - lfx[i-1] - ldprop(u, x[i-1,])
    R <- min(exp(r), 1)
    if(ifelse(is.na(R), FALSE, runif(1) <= R)) {

      ct <- ct + 1
      x[i,] <- u
      lfx[i] <- lfu

    } else {

      x[i,] <- x[i-1,]
      lfx[i] <- lfx[i-1]

    }

  }
  x=x[-(1:B),]
  lfx = lfx[-(1:B)]
  return(list(x=x, lfx=lfx))

}

get.cr <- function(x, alpha) {

  d <- ncol(x)
  o <- matrix(0, d, 2)
  for(j in 1:d) o[j,] <- as.numeric(quantile(x[,j], c(alpha / 2, 1 - alpha / 2)))
  return(o)

}

get.cr.cov <- function(intv, theta) {

  n <- nrow(intv)
  o <- rep(NA, n)
  for(i in 1:n) o[i] <- (intv[i,1] <= theta[i] && intv[i,2] >= theta[i])
  return(all(o))

}

gps.qr <- function(n, reps, M, B) {

  theta.true <- c(2, 1)
  alpha <- 0.05
  eps <- 1 / B
  ldprop <- function(x, x0) sum(dnorm(x, x0, 0.3, log=TRUE))
  rprop <- function(x0) rnorm(2, x0, 0.3)
  coverage1 <- ww <- rep(0, reps)
  len1 <- matrix(0, reps, 2)
  coverage2 <- ww <- rep(0, reps)
  len2 <- matrix(0, reps, 2)
  theta.boot = matrix(0, B, 2)
  for(j in 1:reps) {

    w <- 0.5
    data <- rmodel(n, theta.true)
    theta.hat <- rq(data[,2] ~ data[,1], tau=0.5)$coef
    data.star <- gibbs <- list()
    cvg <- rep(0, B)
    for(b in 1:B) {

      id <- sample(n, n, replace=TRUE)
      data.star[[b]] <- data[id,]
	theta.boot[b,] <- rq(data.star[[b]][,2] ~ data.star[[b]][,1], tau=0.5)$coef

    } 
    go <- TRUE
    t <- 1
    k <- function(t) (1 + t)**(-0.51)
    while(go) {

      for(b in 1:B) {

        #pp <- exp((w - w.old) * apply(gibbs[[b]], 1, lf[[b]]))
        #gibbs.sir <- gibbs[[b]][sample(M, M, replace=TRUE, prob=pp),]
        lf <- function(u) -w * sum(abs(data.star[[b]][,2] - u[1] - u[2] * data.star[[b]][,1]))
        new.gibbs <- mh(theta.hat, lf, ldprop, rprop, M, 100)$x
        cvg[b] <- get.cr.cov(matrix(get.cr(new.gibbs, alpha)[2,],1,2), mean(theta.boot[,2]))    

      }
      diff <- mean(cvg) - (1 - alpha)
      if(abs(diff) <= eps) go <- FALSE else {
      	
        t <- t + 1
        w <- w + k(t) * diff
        
      }

    }
    ww[j] <- w
    lf <- function(u) -w * sum(abs(data[,2] - u[1] - u[2] * data[,1]))
   final.gibbs <- mh(theta.hat, lf, ldprop, rprop, M, 1000)

	final.gibbs = final.gibbs$x
    intv1 <- get.cr(matrix(final.gibbs[,1],M,1), alpha)
    coverage1[j] <- get.cr.cov(intv1, theta.true[1])
    intv2 <- get.cr(matrix(final.gibbs[,2],M,1), alpha)
    coverage2[j] <- get.cr.cov(intv2, theta.true[2])
    len1[j,] <- intv1[,2] - intv1[,1]
    len2[j,] <- intv2[,2] - intv2[,1]
	print(j)
  }
	
  return(list(w=ww, cvg1=mean(coverage1),cvg2 =mean(coverage2) , len1=mean(len1),len2=mean(len2) ))

}

# Example

t = proc.time()
n = 100
reps = 200
M = 2000
B = 200
run = gps.qr(n, reps, M, B)
(proc.time() - t)/(reps*60)

run$cvg1
run$cvg2
run$len1
run$len2
